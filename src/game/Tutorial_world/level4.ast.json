{"ast":[null,{"children":[0,2,7],"kind":"file","start":[0,0]},{"children":[3,5],"end":[1,0],"kind":"imports","start":[1,0]},{"children":[4],"end":[1,0],"kind":"import","start":[1,0]},{"end":[1,7],"kind":"module","start":[1,7],"value":["data","nat","basic"]},{"children":[6],"end":[2,0],"kind":"import","start":[2,0]},{"end":[2,7],"kind":"module","start":[2,7],"value":["tactic","ring"]},{"children":[8,11],"end":[2,7],"kind":"commands","start":[2,7]},{"children":[9],"end":[3,8],"kind":"open","start":[3,0]},{"children":[10,0],"end":[3,5],"kind":"group","start":[3,5]},{"end":[3,5],"kind":"ident","start":[3,5],"value":"nat"},{"children":[0,0,0,12,13,22,35,0],"end":[108,3],"kind":"theorem","start":[101,0]},{"end":[101,6],"kind":"ident","start":[101,6],"value":"one_add_le_self"},{"children":[15],"end":[101,22],"kind":"binders","start":[101,22]},{"children":[16],"end":[101,23],"kind":"vars","start":[101,23]},{"children":[14,0,17],"end":[101,23],"kind":"binder_0","start":[101,23]},{"end":[101,23],"kind":"ident","start":[101,23],"value":"x"},{"end":[101,28],"kind":"notation","pexpr":1,"start":[101,27],"value":"exprℕ"},{"end":[101,33],"kind":"ident","pexpr":2,"start":[101,32],"value":"x"},{"end":[101,37],"kind":"nat","pexpr":3,"start":[101,36],"value":"1"},{"end":[101,41],"kind":"ident","pexpr":4,"start":[101,40],"value":"x"},{"children":[19,20],"end":[101,41],"kind":"notation","pexpr":7,"start":[101,38],"value":"expr + "},{"children":[18,21],"end":[101,41],"kind":"notation","pexpr":10,"start":[101,34],"value":"expr ≤ "},{"children":[0,0,24,29,33],"end":[108,3],"kind":"begin","pexpr":220,"start":[102,0]},{"children":[25,28],"end":[103,22],"kind":"tactic","pexpr":109,"start":[103,2],"value":"rw"},{"children":[27],"end":[103,22],"kind":"parse","pexpr":94,"start":[103,5]},{"end":[103,22],"kind":"ident","pexpr":82,"start":[103,5],"value":"le_iff_exists_add"},{"children":[26],"end":[103,22],"kind":"expr","start":[103,5]},{"end":[103,22],"kind":"parse","pexpr":106,"start":[103,22]},{"children":[30],"end":[104,7],"kind":"tactic","pexpr":156,"start":[104,2],"value":"use"},{"children":[32],"end":[104,7],"kind":"parse","pexpr":153,"start":[104,6]},{"end":[104,7],"kind":"nat","pexpr":148,"start":[104,6],"value":"1"},{"children":[31],"end":[104,7],"kind":"expr","start":[104,6]},{"children":[34],"end":[105,6],"kind":"tactic","pexpr":197,"start":[105,2],"value":"ring"},{"end":[105,6],"kind":"parse","pexpr":194,"start":[105,6]},{"children":[23],"end":[108,3],"kind":"notation","pexpr":221,"start":[102,0],"value":"begin"}],"comments":[{"end":[1,29],"start":[1,24],"text":" hide"},{"end":[1,29],"start":[1,24],"text":" hide"},{"end":[2,26],"start":[2,21],"text":" hide"},{"end":[2,26],"start":[2,21],"text":" hide"},{"end":[3,16],"start":[3,11],"text":" hide"},{"end":[9,0],"start":[6,2],"text":"\n# Tutorial World \n## Level 4: The `Use` and `Ring` tactics\n"},{"end":[20,0],"start":[12,2],"text":"\n## Use:\n\n`use` is a tactic which works on goals of the form `⊢ ∃ c, P(c)` where\n`P(c)` is some proposition which depends on `c`. With a goal of this\nform, `use 0` will turn the goal into `⊢ P(0)`. `use x + y` (assuming\n`x` and `y` are natural numbers in your local context) will turn\nthe goal into `P(x + y)` and so on.\n"},{"end":[96,0],"start":[22,2],"text":" \n If `a` and `b` are naturals, `a ≤ b` is *defined* to mean\n\n`∃ (c : ℕ), b = a + c`. \n\nSo, we have the axiom, le_iff_exists_add (a b : ℕ)\n  a ≤ b ↔ ∃ (c : ℕ), b = a + c\n\nIn words, $a\\le b$\nif and only if there exists a natural $c$ such that $b=a+c$. \n\nIf you really want to change an `a ≤ b` to `∃ c, b = a + c` then\nyou can do so with `rw le_iff_exists_add`:\n\nBut because `a ≤ b` is *defined as* `∃ (c : ℕ), b = a + c`, you\ndo not need to `rw le_iff_exists_add`, you can just pretend when you see `a ≤ b`\nthat it says `∃ (c : ℕ), b = a + c`. You will see a concrete\nexample of this below.\n\nA new construction like `∃` means that we need to learn how to manipulate it.\nThere are two situations. Firstly we need to know how to solve a goal\nof the form `⊢ ∃ c, ...`, and secondly we need to know how to use a hypothesis\nof the form `∃ c, ...`. \n\n\n\nThe goal below is to prove $x\\le 1+x$ for any natural number $x$. \nFirst let's turn the goal explicitly into an existence problem with\n\n`rw le_iff_exists_add,`\n\nand now the goal has become `∃ c : mynat, 1 + x = x + c`. Clearly\nthis statement is true, and the proof is that $c=1$ will work (we also\nneed the fact that addition is commutative, but we proved that a long\ntime ago). How do we make progress with this goal?\n\nThe `use` tactic can be used on goals of the form `∃ c, ...`. The idea\nis that we choose which natural number we want to use, and then we use it.\nSo try\n\n`use 1,`\n\nand now the goal becomes `⊢ 1 + x = x + 1`. You can solve this by\n`exact add_comm 1 x`, or if you are lazy you can just use the `ring` tactic,\nwhich is a powerful AI which will solve any equality in algebra which can\nbe proved using the standard rules of addition and multiplication. Now\nlook at your proof. We're going to remove a line.\n\n\n## Ring:\nWhen dealing with equalities with basic algebraic manipulation, using the tactics we've described so far\nand relying on the axoims of addition and multiplication can be tedious sometimes. \n\nHere, we introduce the `ring` tactic, which can serve to reduce the tedium by closing \nsome goals. \n\nThe `ring` tactic proves identities in commutative rings such as (x+y)^2=x^2+2*x*y+y^2. \nIt works on concrete rings such as ℝ and abstract rings, and will also prove some results in “semirings” such as ℕ.\nNote that ring does not and cannot look at hypotheses.\n\nRing is a “finishing tactic”; this means that it should only be used to close goals. \nIf ring does not close a goal it will issue a warning that you should use the related tactic ring_nf.\n\n\n\n## Important\n\nAn important time-saver here is to note that because `a ≤ b` is *defined*\nas `∃ c : ℕ, b = a + c`, you *do not need to write* `rw le_iff_exists_add`.\nThe `use` tactic will work directly on a goal of the form `a ≤ b`. Just\nuse the difference `b - a` (note that we have not defined subtraction so\nthis does not formally make sense, but you can do the calculation in your head).\nIf you have written `rw le_iff_exists_add` below, then just put two dashes `--`\nbefore it and comment it out. See that the proof still compiles.\n"},{"end":[100,0],"start":[98,2],"text":" Lemma : no-side-bar\nIf $x$ is a natural number, then $x\\le 1+x$.\n"},{"end":[119,0],"start":[111,2],"text":" \n## Summary\n\n· `use` works on the goal. If your goal is `⊢ ∃ c : ℕ, 1 + x = x + c`\nthen `use 1` will turn the goal into `⊢ 1 + x = x + 1`. \n\n· `ring` closes goals when goals can be proved by the ring algebra. \n\n"}],"expr":[null,{"const":["nat",[]]},{"local":{"bi":0,"name":"x","pp":"x","type":1}},{"prenum":{"args":[],"value":"1"}},{"local":{"bi":0,"name":"x","pp":"x","type":1}},{"const":[["has_add","add"],[]]},{"app":[5,3]},{"app":[6,4]},{"const":[["has_le","le"],[]]},{"app":[8,2]},{"app":[9,7]},{"const":[["interactive","executor","execute_explicit"],[]]},{"const":["tactic",[]]},{"app":[11,12]},{"const":[["has_bind","seq"],[]]},{"const":[["has_bind","seq"],[]]},{"const":[["has_bind","seq"],[]]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1303],[]]},{"prenum":{"args":[],"value":"102"}},{"app":[18,19]},{"prenum":{"args":[],"value":"0"}},{"app":[20,21]},{"annotation":{"args":[22],"name":"anonymous_constructor"}},{"app":[17,23]},{"app":[16,24]},{"const":[["has_bind","seq"],[]]},{"const":[["has_bind","seq"],[]]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1305],[]]},{"prenum":{"args":[],"value":"103"}},{"app":[29,30]},{"prenum":{"args":[],"value":"2"}},{"app":[31,32]},{"annotation":{"args":[33],"name":"anonymous_constructor"}},{"app":[28,34]},{"app":[27,35]},{"const":[["tactic","istep"],[]]},{"prenum":{"args":[],"value":"103"}},{"app":[37,38]},{"prenum":{"args":[],"value":"2"}},{"app":[39,40]},{"prenum":{"args":[],"value":"103"}},{"app":[41,42]},{"prenum":{"args":[],"value":"2"}},{"app":[43,44]},{"prenum":{"args":[],"value":"24"}},{"app":[45,46]},{"const":[["tactic","interactive","rw"],[]]},{"const":[["tactic","interactive","rw_rules_t","mk"],[]]},{"const":[["list","cons"],[0]]},{"const":[["tactic","interactive","rw_rule"],[]]},{"app":[50,51]},{"const":[["tactic","interactive","rw_rule","mk"],[]]},{"const":[["pos","mk"],[]]},{"const":["bit1",[0]]},{"const":["nat",[]]},{"app":[55,56]},{"const":[["nat","has_one"],[]]},{"app":[57,58]},{"const":[["nat","has_add"],[]]},{"app":[59,60]},{"const":["bit0",[0]]},{"app":[62,56]},{"app":[63,60]},{"const":[["has_one","one"],[0]]},{"app":[65,56]},{"app":[66,58]},{"app":[61,67]},{"app":[64,68]},{"app":[64,69]},{"app":[61,70]},{"app":[61,71]},{"app":[61,72]},{"app":[54,73]},{"app":[64,67]},{"app":[61,75]},{"app":[74,76]},{"app":[53,77]},{"const":[["bool","ff"],[]]},{"app":[78,79]},{"const":[[4,"_",1304],[]]},{"local":{"bi":0,"name":"le_iff_exists_add","pp":"le_iff_exists_add","type":81}},{"expr_quote_macro":{"args":[],"reflected":false,"value":82}},{"app":[80,83]},{"app":[52,84]},{"const":[["list","nil"],[0]]},{"app":[86,51]},{"app":[85,87]},{"app":[49,88]},{"const":[["option","none"],[0]]},{"const":["pos",[]]},{"app":[90,91]},{"app":[89,92]},{"annotation":{"args":[93],"name":"as_is"}},{"app":[48,94]},{"const":[["interactive","loc","ns"],[]]},{"const":["option",[0]]},{"const":["name",[]]},{"app":[97,98]},{"app":[50,99]},{"app":[90,98]},{"app":[100,101]},{"app":[86,99]},{"app":[102,103]},{"app":[96,104]},{"annotation":{"args":[105],"name":"as_is"}},{"app":[95,106]},{"app":[47,107]},{"app":[36,108]},{"app":[26,109]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1306],[]]},{"prenum":{"args":[],"value":"104"}},{"app":[112,113]},{"prenum":{"args":[],"value":"3"}},{"app":[114,115]},{"annotation":{"args":[116],"name":"anonymous_constructor"}},{"app":[111,117]},{"app":[110,118]},{"app":[25,119]},{"app":[15,120]},{"const":[["has_bind","seq"],[]]},{"const":[["has_bind","seq"],[]]},{"const":[["has_bind","seq"],[]]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1307],[]]},{"prenum":{"args":[],"value":"104"}},{"app":[126,127]},{"prenum":{"args":[],"value":"2"}},{"app":[128,129]},{"annotation":{"args":[130],"name":"anonymous_constructor"}},{"app":[125,131]},{"app":[124,132]},{"const":[["tactic","istep"],[]]},{"prenum":{"args":[],"value":"104"}},{"app":[134,135]},{"prenum":{"args":[],"value":"2"}},{"app":[136,137]},{"prenum":{"args":[],"value":"104"}},{"app":[138,139]},{"prenum":{"args":[],"value":"2"}},{"app":[140,141]},{"prenum":{"args":[],"value":"29"}},{"app":[142,143]},{"const":[["tactic","interactive","use"],[]]},{"const":["pexpr",[]]},{"app":[50,146]},{"prenum":{"args":[],"value":"1"}},{"expr_quote_macro":{"args":[],"reflected":false,"value":148}},{"app":[147,149]},{"app":[86,146]},{"app":[150,151]},{"annotation":{"args":[152],"name":"as_is"}},{"app":[145,153]},{"app":[144,154]},{"app":[133,155]},{"app":[123,156]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1308],[]]},{"prenum":{"args":[],"value":"105"}},{"app":[159,160]},{"prenum":{"args":[],"value":"3"}},{"app":[161,162]},{"annotation":{"args":[163],"name":"anonymous_constructor"}},{"app":[158,164]},{"app":[157,165]},{"app":[122,166]},{"const":[["has_bind","seq"],[]]},{"const":[["has_bind","seq"],[]]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1309],[]]},{"prenum":{"args":[],"value":"105"}},{"app":[171,172]},{"prenum":{"args":[],"value":"2"}},{"app":[173,174]},{"annotation":{"args":[175],"name":"anonymous_constructor"}},{"app":[170,176]},{"app":[169,177]},{"const":[["tactic","istep"],[]]},{"prenum":{"args":[],"value":"105"}},{"app":[179,180]},{"prenum":{"args":[],"value":"2"}},{"app":[181,182]},{"prenum":{"args":[],"value":"105"}},{"app":[183,184]},{"prenum":{"args":[],"value":"2"}},{"app":[185,186]},{"prenum":{"args":[],"value":"33"}},{"app":[187,188]},{"const":[["tactic","interactive","ring"],[]]},{"const":[["option","none"],[0]]},{"const":["unit",[]]},{"app":[191,192]},{"annotation":{"args":[193],"name":"as_is"}},{"app":[190,194]},{"app":[189,195]},{"app":[178,196]},{"app":[168,197]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1310],[]]},{"prenum":{"args":[],"value":"108"}},{"app":[200,201]},{"prenum":{"args":[],"value":"1"}},{"app":[202,203]},{"annotation":{"args":[204],"name":"anonymous_constructor"}},{"app":[199,205]},{"app":[198,206]},{"app":[167,207]},{"app":[121,208]},{"app":[14,209]},{"const":[["tactic","save_info"],[]]},{"const":[[4,"_",1311],[]]},{"prenum":{"args":[],"value":"108"}},{"app":[212,213]},{"prenum":{"args":[],"value":"0"}},{"app":[214,215]},{"annotation":{"args":[216],"name":"anonymous_constructor"}},{"app":[211,217]},{"app":[210,218]},{"app":[13,219]},{"annotation":{"args":[220],"name":"by"}}],"file":1,"level":["0"]}